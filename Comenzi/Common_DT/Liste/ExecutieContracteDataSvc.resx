<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="sqlSelectCommand1.DesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="sqlSelectCommand1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="sqlSelectCommand1.CommandDesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <data name="sqlSelectCommand1.CommandText" xml:space="preserve">
    <value> SELECT dbo.tblCentru.Denumire AS Centru ,
        dbo.tblLotBase.Denumire AS Lot ,
        dbo.tblProduse.Denumire AS Produs ,
        dbo.tbxUMStandard.Abbreviation AS UM ,
        dbo.tblProduse.Pret ,
        SUM(dbo.tblDistribuireLotDet.CantitateDistribuita)
        + ISNULL(( SELECT   SUM(A.CantitateTransfer)
                   FROM     dbo.tblTransfer A
                   WHERE    A.CentruDestinatieID = dbo.tblCentru.ID
                            AND A.ProduseID = dbo.tblProduse.ID
                            AND A.LotBaseID = dbo.tblLotBase.ID
                 ), 0)
        - ISNULL(( SELECT   SUM(A.CantitateTransfer)
                   FROM     dbo.tblTransfer A
                   WHERE    A.CentruSursaID = dbo.tblCentru.ID
                            AND A.ProduseID = dbo.tblProduse.ID
                            AND A.LotBaseID = dbo.tblLotBase.ID
                 ), 0) AS CantitateDistribuita ,
        ( SUM(dbo.tblDistribuireLotDet.CantitateDistribuita)
          + ISNULL(( SELECT SUM(A.CantitateTransfer)
                     FROM   dbo.tblTransfer A
                     WHERE  A.CentruDestinatieID = dbo.tblCentru.ID
                            AND A.ProduseID = dbo.tblProduse.ID
                            AND A.LotBaseID = dbo.tblLotBase.ID
                   ), 0)
          - ISNULL(( SELECT SUM(A.CantitateTransfer)
                     FROM   dbo.tblTransfer A
                     WHERE  A.CentruSursaID = dbo.tblCentru.ID
                            AND A.ProduseID = dbo.tblProduse.ID
                            AND A.LotBaseID = dbo.tblLotBase.ID
                   ), 0) ) * dbo.tblProduse.Pret
        + ( SUM(dbo.tblDistribuireLotDet.CantitateDistribuita)
            + ISNULL(( SELECT   SUM(A.CantitateTransfer)
                       FROM     dbo.tblTransfer A
                       WHERE    A.CentruDestinatieID = dbo.tblCentru.ID
                                AND A.ProduseID = dbo.tblProduse.ID
                                AND A.LotBaseID = dbo.tblLotBase.ID
                     ), 0)
            - ISNULL(( SELECT   SUM(A.CantitateTransfer)
                       FROM     dbo.tblTransfer A
                       WHERE    A.CentruSursaID = dbo.tblCentru.ID
                                AND A.ProduseID = dbo.tblProduse.ID
                                AND A.LotBaseID = dbo.tblLotBase.ID
                     ), 0) ) * dbo.tblProduse.Pret * dbo.tbxCotaTVA.Valoare
        / 100 AS ValoareCuTva ,
        ISNULL(( SELECT SUM(ISNULL(CantitateReceptionata, 0))
                 FROM   dbo.tblComandaBase
                        INNER JOIN dbo.tblReceptieComandaBase ON dbo.tblComandaBase.ID = dbo.tblReceptieComandaBase.ComandaBaseID
                        INNER JOIN dbo.tblReceptieComandaDet ON dbo.tblReceptieComandaBase.ID = dbo.tblReceptieComandaDet.ReceptieComandaBaseID
                 WHERE  dbo.tblComandaBase.LotID = dbo.tblLotBase.ID
                        AND dbo.tblProduse.ID = dbo.tblReceptieComandaDet.ProduseID
                        AND dbo.tblComandaBase.CentruID = dbo.tblCentru.ID
               ), 0) AS CantitateReceptionata ,
        ISNULL(( SELECT SUM(ISNULL(CantitateReceptionata, 0))
                 FROM   dbo.tblComandaBase
                        INNER JOIN dbo.tblReceptieComandaBase ON dbo.tblComandaBase.ID = dbo.tblReceptieComandaBase.ComandaBaseID
                        INNER JOIN dbo.tblReceptieComandaDet ON dbo.tblReceptieComandaBase.ID = dbo.tblReceptieComandaDet.ReceptieComandaBaseID
                 WHERE  dbo.tblComandaBase.LotID = dbo.tblLotBase.ID
                        AND dbo.tblProduse.ID = dbo.tblReceptieComandaDet.ProduseID
                        AND dbo.tblComandaBase.CentruID = dbo.tblCentru.ID
               ), 0) * dbo.tblProduse.Pret
        + ISNULL(( SELECT   SUM(ISNULL(CantitateReceptionata, 0))
                   FROM     dbo.tblComandaBase
                            INNER JOIN dbo.tblReceptieComandaBase ON dbo.tblComandaBase.ID = dbo.tblReceptieComandaBase.ComandaBaseID
                            INNER JOIN dbo.tblReceptieComandaDet ON dbo.tblReceptieComandaBase.ID = dbo.tblReceptieComandaDet.ReceptieComandaBaseID
                   WHERE    dbo.tblComandaBase.LotID = dbo.tblLotBase.ID
                            AND dbo.tblProduse.ID = dbo.tblReceptieComandaDet.ProduseID
                            AND dbo.tblComandaBase.CentruID = dbo.tblCentru.ID
                 ), 0) * dbo.tblProduse.Pret * dbo.tbxCotaTVA.Valoare / 100 AS ValoareReceptionata ,
        CONVERT(DECIMAL(18, 6), 0) AS CantitateDisponibila ,
        CONVERT(DECIMAL(18, 6), 0) AS ValoareDisponibila ,
        ( SELECT    dbo.tblAcordCadru.Denumire
          FROM      dbo.tblAcordCadru
          WHERE     dbo.tblAcordCadru.ID = dbo.tblLotBase.AcordCadruID
        ) AS AcordCadru
 INTO   #tmp
 FROM   dbo.tblLotBase
        INNER JOIN dbo.tblDistribuireLot ON dbo.tblLotBase.ID = dbo.tblDistribuireLot.LotBaseID
        INNER JOIN dbo.tblCentru ON dbo.tblDistribuireLot.CentruID = dbo.tblCentru.ID
        INNER JOIN dbo.tblDistribuireLotDet ON dbo.tblDistribuireLot.ID = dbo.tblDistribuireLotDet.DistribuireLotID
        INNER JOIN dbo.tblProduse ON dbo.tblDistribuireLotDet.ProduseID = dbo.tblProduse.ID
        INNER JOIN dbo.tbxUMStandard ON dbo.tblProduse.UMID = dbo.tbxUMStandard.ID
        INNER JOIN dbo.tbxCotaTVA ON dbo.tblProduse.CotaTVAID = dbo.tbxCotaTVA.ID
 WHERE  ( @pLotBaseID IS NULL
          OR dbo.tblLotBase.ID = @pLotBaseID
        )
        AND ( @pCentruID IS NULL
              OR dbo.tblCentru.ID = @pCentruID
            )
 GROUP BY dbo.tblCentru.Denumire ,
        dbo.tblLotBase.ID ,
        tblLotBase.AcordCadruID ,
        dbo.tblProduse.ID ,
        dbo.tblCentru.ID ,
        dbo.tblLotBase.Denumire ,
        dbo.tblProduse.Denumire ,
        dbo.tbxUMStandard.Abbreviation ,
        dbo.tblProduse.Pret ,
        dbo.tbxCotaTVA.Valoare;
        
 SELECT Centru ,
        Lot ,
        Produs ,
        UM ,
        Pret ,
        CantitateDistribuita ,
        ValoareCuTva ,
        CantitateReceptionata ,
        ValoareReceptionata ,
        CantitateDistribuita - CantitateReceptionata AS CantitateDisponibila ,
        ValoareCuTva - ValoareReceptionata AS ValoareDisponibila ,
        AcordCadru
 FROM   #tmp;</value>
  </data>
  <metadata name="sqlConnection1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 56</value>
  </metadata>
  <metadata name="sqlDataAdapter_GetLista.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 95</value>
  </metadata>
  <metadata name="sqlSelectCommand2.DesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="sqlSelectCommand2.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="sqlSelectCommand2.CommandDesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="sqlInsertCommand1.DesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="sqlInsertCommand1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="sqlInsertCommand1.CommandDesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <data name="sqlInsertCommand1.CommandText" xml:space="preserve">
    <value>INSERT INTO [tblCentru] ([ID], [Cod], [Denumire], [IsActive], [TipCentruID], [ModulID]) VALUES (@ID, @Cod, @Denumire, @IsActive, @TipCentruID, @ModulID);
SELECT ID, Cod, Denumire, IsActive, TipCentruID, ModulID FROM tblCentru WHERE (ID = @ID)</value>
  </data>
  <metadata name="sqlUpdateCommand1.DesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="sqlUpdateCommand1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="sqlUpdateCommand1.CommandDesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <data name="sqlUpdateCommand1.CommandText" xml:space="preserve">
    <value>UPDATE [tblCentru] SET [ID] = @ID, [Cod] = @Cod, [Denumire] = @Denumire, [IsActive] = @IsActive, [TipCentruID] = @TipCentruID, [ModulID] = @ModulID WHERE (([ID] = @Original_ID) AND ([Cod] = @Original_Cod) AND ([Denumire] = @Original_Denumire) AND ([IsActive] = @Original_IsActive) AND ([TipCentruID] = @Original_TipCentruID) AND ((@IsNull_ModulID = 1 AND [ModulID] IS NULL) OR ([ModulID] = @Original_ModulID)));
SELECT ID, Cod, Denumire, IsActive, TipCentruID, ModulID FROM tblCentru WHERE (ID = @ID)</value>
  </data>
  <metadata name="sqlDeleteCommand1.DesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="sqlDeleteCommand1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="sqlDeleteCommand1.CommandDesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <data name="sqlDeleteCommand1.CommandText" xml:space="preserve">
    <value>DELETE FROM [tblCentru] WHERE (([ID] = @Original_ID) AND ([Cod] = @Original_Cod) AND ([Denumire] = @Original_Denumire) AND ([IsActive] = @Original_IsActive) AND ([TipCentruID] = @Original_TipCentruID) AND ((@IsNull_ModulID = 1 AND [ModulID] IS NULL) OR ([ModulID] = @Original_ModulID)))</value>
  </data>
  <metadata name="sqlDataAdapter_GetCentru.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 134</value>
  </metadata>
  <metadata name="sqlSelectCommand3.DesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="sqlSelectCommand3.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="sqlSelectCommand3.CommandDesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="sqlInsertCommand2.DesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="sqlInsertCommand2.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="sqlInsertCommand2.CommandDesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <data name="sqlInsertCommand2.CommandText" xml:space="preserve">
    <value>INSERT INTO [tblLotBase] ([ID], [Denumire], [CodCPVID], [PartenerID], [Data]) VALUES (@ID, @Denumire, @CodCPVID, @PartenerID, @Data);
SELECT ID, Denumire, CodCPVID, PartenerID, Data FROM tblLotBase WHERE (ID = @ID)</value>
  </data>
  <metadata name="sqlUpdateCommand2.DesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="sqlUpdateCommand2.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="sqlUpdateCommand2.CommandDesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <data name="sqlUpdateCommand2.CommandText" xml:space="preserve">
    <value>UPDATE [tblLotBase] SET [ID] = @ID, [Denumire] = @Denumire, [CodCPVID] = @CodCPVID, [PartenerID] = @PartenerID, [Data] = @Data WHERE (([ID] = @Original_ID) AND ([Denumire] = @Original_Denumire) AND ((@IsNull_CodCPVID = 1 AND [CodCPVID] IS NULL) OR ([CodCPVID] = @Original_CodCPVID)) AND ([PartenerID] = @Original_PartenerID) AND ([Data] = @Original_Data));
SELECT ID, Denumire, CodCPVID, PartenerID, Data FROM tblLotBase WHERE (ID = @ID)</value>
  </data>
  <metadata name="sqlDeleteCommand2.DesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="sqlDeleteCommand2.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="sqlDeleteCommand2.CommandDesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <data name="sqlDeleteCommand2.CommandText" xml:space="preserve">
    <value>DELETE FROM [tblLotBase] WHERE (([ID] = @Original_ID) AND ([Denumire] = @Original_Denumire) AND ((@IsNull_CodCPVID = 1 AND [CodCPVID] IS NULL) OR ([CodCPVID] = @Original_CodCPVID)) AND ([PartenerID] = @Original_PartenerID) AND ([Data] = @Original_Data))</value>
  </data>
  <metadata name="sqlDataAdapter_GetLot.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 173</value>
  </metadata>
  <metadata name="sqlSelectCommand4.DesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="sqlSelectCommand4.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="sqlSelectCommand4.CommandDesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <data name="sqlSelectCommand4.CommandText" xml:space="preserve">
    <value>SELECT  T.Centru ,
        T.Lot ,
        T.AcordCadru ,
        ( SUM(T.CantitateReceptionata) / SUM(T.CantitateDistribuita) * 100 ) AS Procent
FROM    ( SELECT    dbo.tblCentru.Denumire AS Centru ,
                    dbo.tblLotBase.Denumire AS Lot ,
                    ( SELECT    dbo.tblAcordCadru.Denumire
                      FROM      dbo.tblAcordCadru
                      WHERE     dbo.tblAcordCadru.ID = dbo.tblLotBase.AcordCadruID
                    ) AS AcordCadru ,
                    SUM(dbo.tblDistribuireLotDet.CantitateDistribuita)
                    + ISNULL(( SELECT   SUM(A.CantitateTransfer)
                               FROM     dbo.tblTransfer A
                               WHERE    A.CentruDestinatieID = dbo.tblCentru.ID
                                        AND A.LotBaseID = dbo.tblLotBase.ID
                                        AND A.ProduseID = dbo.tblDistribuireLotDet.ProduseID
                             ), 0)
                    - ISNULL(( SELECT   SUM(A.CantitateTransfer)
                               FROM     dbo.tblTransfer A
                               WHERE    A.CentruSursaID = dbo.tblCentru.ID
                                        AND A.LotBaseID = dbo.tblLotBase.ID
                                        AND A.ProduseID = dbo.tblDistribuireLotDet.ProduseID
                             ), 0) AS CantitateDistribuita ,
                    ISNULL(( SELECT SUM(ISNULL(CantitateReceptionata, 0))
                             FROM   dbo.tblComandaBase
                                    INNER JOIN dbo.tblReceptieComandaBase ON dbo.tblComandaBase.ID = dbo.tblReceptieComandaBase.ComandaBaseID
                                    INNER JOIN dbo.tblReceptieComandaDet ON dbo.tblReceptieComandaBase.ID = dbo.tblReceptieComandaDet.ReceptieComandaBaseID
                             WHERE  dbo.tblComandaBase.LotID = dbo.tblLotBase.ID
                                    AND dbo.tblDistribuireLotDet.ProduseID = dbo.tblReceptieComandaDet.ProduseID
                                    AND dbo.tblComandaBase.CentruID = dbo.tblCentru.ID
                           ), 0) AS CantitateReceptionata
          FROM      dbo.tblLotBase
                    INNER JOIN dbo.tblDistribuireLot ON dbo.tblLotBase.ID = dbo.tblDistribuireLot.LotBaseID
                    INNER JOIN dbo.tblCentru ON dbo.tblDistribuireLot.CentruID = dbo.tblCentru.ID
                    INNER JOIN dbo.tblDistribuireLotDet ON dbo.tblDistribuireLot.ID = dbo.tblDistribuireLotDet.DistribuireLotID
          WHERE     ( @pLotBaseID IS NULL
                      OR dbo.tblLotBase.ID = @pLotBaseID
                    )
                    AND ( @pCentruID IS NULL
                          OR dbo.tblCentru.ID = @pCentruID
                        )
          GROUP BY  dbo.tblCentru.Denumire ,
                    dbo.tblLotBase.AcordCadruID ,
                    dbo.tblLotBase.ID ,
                    dbo.tblCentru.ID ,
                    dbo.tblLotBase.Denumire ,
                    dbo.tblDistribuireLotDet.ProduseID
        ) AS T
WHERE   T.CantitateDistribuita &lt;&gt; 0
GROUP BY T.Lot ,
        T.Centru ,
        T.AcordCadru;</value>
  </data>
  <metadata name="sqlDataAdapter_GetProcent.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>214, 134</value>
  </metadata>
  <metadata name="$this.TrayLargeIcon" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
</root>