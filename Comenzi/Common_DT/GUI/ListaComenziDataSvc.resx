<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="sqlSelectCommand1.DesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="sqlSelectCommand1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="sqlSelectCommand1.CommandDesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <data name="sqlSelectCommand1.CommandText" xml:space="preserve">
    <value>SELECT  dbo.tblProduse.Denumire AS DenumireProdus ,
        dbo.tbxUMStandard.Abbreviation AS UM ,
        Pret ,
        dbo.tbxCotaTVA.Valoare AS CotaTVA ,
        SUM(Cantitate) AS Cantitate ,
        CentruID ,
        dbo.tblCentru.Denumire AS DenumireCentru ,
        SUM(Cantitate) * Pret * dbo.tbxCotaTVA.Valoare / 100 AS ValoareTVA ,
        SUM(Cantitate) * Pret AS Valoare ,
        SUM(Cantitate) * Pret + SUM(Cantitate) * Pret * dbo.tbxCotaTVA.Valoare
        / 100 AS ValoareCuTVA ,
        dbo.tblLotBase.Denumire AS Lot ,
        ( SELECT    dbo.tblAcordCadru.Denumire
          FROM      dbo.tblAcordCadru
          WHERE     dbo.tblAcordCadru.ID = dbo.tblLotBase.AcordCadruID
        ) AS AcordCadru
FROM    dbo.tblComandaBase
        INNER JOIN dbo.tblLotBase ON dbo.tblComandaBase.LotID = dbo.tblLotBase.ID
        INNER JOIN dbo.tblCentru ON dbo.tblComandaBase.CentruID = dbo.tblCentru.ID
        INNER JOIN dbo.tblComandaDet ON dbo.tblComandaBase.ID = dbo.tblComandaDet.ComandaBaseID
        INNER JOIN dbo.tblProduse ON dbo.tblComandaDet.ProduseID = dbo.tblProduse.ID
        INNER JOIN dbo.tbxCotaTVA ON dbo.tblProduse.CotaTVAID = dbo.tbxCotaTVA.ID
        INNER JOIN dbo.tbxUMStandard ON dbo.tblProduse.UMID = dbo.tbxUMStandard.ID
WHERE   dbo.tblCentru.TipCentruID = @pTipCentruID
        AND dbo.tblComandaBase.Data BETWEEN @pDataStart
                                    AND     @pDataStop
        AND dbo.tblLotBase.PartenerID = @pFurnizorID
        AND ( @pLotID IS NULL
              OR dbo.tblComandaBase.LotID = @pLotID
            )
GROUP BY dbo.tblProduse.Denumire ,
        dbo.tblProduse.Pret ,
        dbo.tbxUMStandard.Abbreviation ,
        dbo.tbxCotaTVA.Valoare ,
        dbo.tblComandaBase.CentruID ,
        dbo.tblCentru.Denumire ,
        dbo.tblLotBase.Denumire ,
        dbo.tblLotBase.AcordCadruID;</value>
  </data>
  <metadata name="sqlConnection1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 56</value>
  </metadata>
  <metadata name="sqlDataAdapter_GetLista.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 95</value>
  </metadata>
  <metadata name="sqlSelectCommand2.DesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="sqlSelectCommand2.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="sqlSelectCommand2.CommandDesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="sqlInsertCommand1.DesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="sqlInsertCommand1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="sqlInsertCommand1.CommandDesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <data name="sqlInsertCommand1.CommandText" xml:space="preserve">
    <value>INSERT INTO [tbxTipCentru] ([ID], [Abbreviation], [Description], [IsActive], [EffectiveDate], [ExpirationDate]) VALUES (@ID, @Abbreviation, @Description, @IsActive, @EffectiveDate, @ExpirationDate);
SELECT ID, Abbreviation, Description, IsActive, EffectiveDate, ExpirationDate FROM tbxTipCentru WHERE (ID = @ID)</value>
  </data>
  <metadata name="sqlUpdateCommand1.DesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="sqlUpdateCommand1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="sqlUpdateCommand1.CommandDesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <data name="sqlUpdateCommand1.CommandText" xml:space="preserve">
    <value>UPDATE [tbxTipCentru] SET [ID] = @ID, [Abbreviation] = @Abbreviation, [Description] = @Description, [IsActive] = @IsActive, [EffectiveDate] = @EffectiveDate, [ExpirationDate] = @ExpirationDate WHERE (([ID] = @Original_ID) AND ([Abbreviation] = @Original_Abbreviation) AND ([Description] = @Original_Description) AND ([IsActive] = @Original_IsActive) AND ([EffectiveDate] = @Original_EffectiveDate) AND ((@IsNull_ExpirationDate = 1 AND [ExpirationDate] IS NULL) OR ([ExpirationDate] = @Original_ExpirationDate)));
SELECT ID, Abbreviation, Description, IsActive, EffectiveDate, ExpirationDate FROM tbxTipCentru WHERE (ID = @ID)</value>
  </data>
  <metadata name="sqlDeleteCommand1.DesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="sqlDeleteCommand1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="sqlDeleteCommand1.CommandDesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <data name="sqlDeleteCommand1.CommandText" xml:space="preserve">
    <value>DELETE FROM [tbxTipCentru] WHERE (([ID] = @Original_ID) AND ([Abbreviation] = @Original_Abbreviation) AND ([Description] = @Original_Description) AND ([IsActive] = @Original_IsActive) AND ([EffectiveDate] = @Original_EffectiveDate) AND ((@IsNull_ExpirationDate = 1 AND [ExpirationDate] IS NULL) OR ([ExpirationDate] = @Original_ExpirationDate)))</value>
  </data>
  <metadata name="sqlDataAdapter_tbxTipCentru.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 134</value>
  </metadata>
  <metadata name="sqlSelectCommand3.DesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="sqlSelectCommand3.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="sqlSelectCommand3.CommandDesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="sqlInsertCommand2.DesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="sqlInsertCommand2.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="sqlInsertCommand2.CommandDesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <data name="sqlInsertCommand2.CommandText" xml:space="preserve">
    <value>INSERT INTO [dbo].[tblCentru] ([ID], [Cod], [Denumire], [IsActive], [TipCentruID], [ModulID]) VALUES (@ID, @Cod, @Denumire, @IsActive, @TipCentruID, @ModulID);
SELECT ID, Cod, Denumire, IsActive, TipCentruID, ModulID FROM tblCentru WHERE (ID = @ID)</value>
  </data>
  <metadata name="sqlUpdateCommand2.DesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="sqlUpdateCommand2.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="sqlUpdateCommand2.CommandDesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <data name="sqlUpdateCommand2.CommandText" xml:space="preserve">
    <value>UPDATE [dbo].[tblCentru] SET [ID] = @ID, [Cod] = @Cod, [Denumire] = @Denumire, [IsActive] = @IsActive, [TipCentruID] = @TipCentruID, [ModulID] = @ModulID WHERE (([ID] = @Original_ID) AND ([Cod] = @Original_Cod) AND ([Denumire] = @Original_Denumire) AND ([IsActive] = @Original_IsActive) AND ([TipCentruID] = @Original_TipCentruID) AND ((@IsNull_ModulID = 1 AND [ModulID] IS NULL) OR ([ModulID] = @Original_ModulID)));
SELECT ID, Cod, Denumire, IsActive, TipCentruID, ModulID FROM tblCentru WHERE (ID = @ID)</value>
  </data>
  <metadata name="sqlDeleteCommand2.DesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="sqlDeleteCommand2.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="sqlDeleteCommand2.CommandDesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <data name="sqlDeleteCommand2.CommandText" xml:space="preserve">
    <value>DELETE FROM [dbo].[tblCentru] WHERE (([ID] = @Original_ID) AND ([Cod] = @Original_Cod) AND ([Denumire] = @Original_Denumire) AND ([IsActive] = @Original_IsActive) AND ([TipCentruID] = @Original_TipCentruID) AND ((@IsNull_ModulID = 1 AND [ModulID] IS NULL) OR ([ModulID] = @Original_ModulID)))</value>
  </data>
  <metadata name="sqlDataAdapter_Centre.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 173</value>
  </metadata>
  <metadata name="sqlSelectCommand4.DesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="sqlSelectCommand4.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="sqlSelectCommand4.CommandDesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="sqlInsertCommand3.DesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="sqlInsertCommand3.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="sqlInsertCommand3.CommandDesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <data name="sqlInsertCommand3.CommandText" xml:space="preserve">
    <value>INSERT INTO [tblPartener] ([ID], [Cod], [Denumire], [Adresa], [Detalii], [CUI], [IsActive], [UserName]) VALUES (@ID, @Cod, @Denumire, @Adresa, @Detalii, @CUI, @IsActive, @UserName);
SELECT ID, Cod, Denumire, Adresa, Detalii, CUI, IsActive, UserName FROM tblPartener WHERE (ID = @ID)</value>
  </data>
  <metadata name="sqlUpdateCommand3.DesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="sqlUpdateCommand3.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="sqlUpdateCommand3.CommandDesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <data name="sqlUpdateCommand3.CommandText" xml:space="preserve">
    <value>UPDATE [tblPartener] SET [ID] = @ID, [Cod] = @Cod, [Denumire] = @Denumire, [Adresa] = @Adresa, [Detalii] = @Detalii, [CUI] = @CUI, [IsActive] = @IsActive, [UserName] = @UserName WHERE (([ID] = @Original_ID) AND ([Cod] = @Original_Cod) AND ([Denumire] = @Original_Denumire) AND ((@IsNull_Adresa = 1 AND [Adresa] IS NULL) OR ([Adresa] = @Original_Adresa)) AND ((@IsNull_Detalii = 1 AND [Detalii] IS NULL) OR ([Detalii] = @Original_Detalii)) AND ((@IsNull_CUI = 1 AND [CUI] IS NULL) OR ([CUI] = @Original_CUI)) AND ([IsActive] = @Original_IsActive) AND ([UserName] = @Original_UserName));
SELECT ID, Cod, Denumire, Adresa, Detalii, CUI, IsActive, UserName FROM tblPartener WHERE (ID = @ID)</value>
  </data>
  <metadata name="sqlDeleteCommand3.DesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="sqlDeleteCommand3.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="sqlDeleteCommand3.CommandDesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <data name="sqlDeleteCommand3.CommandText" xml:space="preserve">
    <value>DELETE FROM [tblPartener] WHERE (([ID] = @Original_ID) AND ([Cod] = @Original_Cod) AND ([Denumire] = @Original_Denumire) AND ((@IsNull_Adresa = 1 AND [Adresa] IS NULL) OR ([Adresa] = @Original_Adresa)) AND ((@IsNull_Detalii = 1 AND [Detalii] IS NULL) OR ([Detalii] = @Original_Detalii)) AND ((@IsNull_CUI = 1 AND [CUI] IS NULL) OR ([CUI] = @Original_CUI)) AND ([IsActive] = @Original_IsActive) AND ([UserName] = @Original_UserName))</value>
  </data>
  <metadata name="sqlDataAdapter_GetParteneri.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 212</value>
  </metadata>
  <metadata name="sqlSelectCommand5.DesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="sqlSelectCommand5.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="sqlSelectCommand5.CommandDesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="sqlInsertCommand4.DesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="sqlInsertCommand4.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="sqlInsertCommand4.CommandDesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <data name="sqlInsertCommand4.CommandText" xml:space="preserve">
    <value>INSERT INTO [tblLotBase] ([ID], [Denumire], [CodCPVID], [PartenerID], [Data]) VALUES (@ID, @Denumire, @CodCPVID, @PartenerID, @Data);
SELECT ID, Denumire, CodCPVID, PartenerID, Data FROM tblLotBase WHERE (ID = @ID)</value>
  </data>
  <metadata name="sqlUpdateCommand4.DesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="sqlUpdateCommand4.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="sqlUpdateCommand4.CommandDesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <data name="sqlUpdateCommand4.CommandText" xml:space="preserve">
    <value>UPDATE [tblLotBase] SET [ID] = @ID, [Denumire] = @Denumire, [CodCPVID] = @CodCPVID, [PartenerID] = @PartenerID, [Data] = @Data WHERE (([ID] = @Original_ID) AND ([Denumire] = @Original_Denumire) AND ((@IsNull_CodCPVID = 1 AND [CodCPVID] IS NULL) OR ([CodCPVID] = @Original_CodCPVID)) AND ([PartenerID] = @Original_PartenerID) AND ([Data] = @Original_Data));
SELECT ID, Denumire, CodCPVID, PartenerID, Data FROM tblLotBase WHERE (ID = @ID)</value>
  </data>
  <metadata name="sqlDeleteCommand4.DesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="sqlDeleteCommand4.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="sqlDeleteCommand4.CommandDesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <data name="sqlDeleteCommand4.CommandText" xml:space="preserve">
    <value>DELETE FROM [tblLotBase] WHERE (([ID] = @Original_ID) AND ([Denumire] = @Original_Denumire) AND ((@IsNull_CodCPVID = 1 AND [CodCPVID] IS NULL) OR ([CodCPVID] = @Original_CodCPVID)) AND ([PartenerID] = @Original_PartenerID) AND ([Data] = @Original_Data))</value>
  </data>
  <metadata name="sqlDataAdapter_GetLoturi.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 251</value>
  </metadata>
  <metadata name="sqlDataAdapter_GetListaDisponibil.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 290</value>
  </metadata>
  <metadata name="sqlCommand1.DesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="sqlCommand1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>226, 212</value>
  </metadata>
  <metadata name="sqlCommand1.CommandDesignTimeVisible" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <data name="sqlCommand1.CommandText" xml:space="preserve">
    <value>SELECT  dbo.tblLotBase.ID ,
        dbo.tblLotBase.Denumire AS DenumireLot ,
        dbo.tblProduse.Denumire AS DenumireProdus ,
        dbo.tbxUMStandard.Abbreviation AS UM ,
        dbo.tblProduse.Pret ,
        dbo.tblLotDet.Cantitate ,
        dbo.tblProduse.Pret * dbo.tblLotDet.Cantitate AS ValoareFaraTvaLot ,
        ( dbo.tblProduse.Pret * dbo.tblLotDet.Cantitate )
        * dbo.tbxCotaTVA.Valoare / 100 AS ValoareTvaLot ,
        dbo.tblProduse.Pret * dbo.tblLotDet.Cantitate + ( dbo.tblProduse.Pret
                                                          * dbo.tblLotDet.Cantitate )
        * dbo.tbxCotaTVA.Valoare / 100 AS ValoareCuTvaLot ,
        ISNULL(( SELECT SUM(ISNULL(CantitateReceptionata, 0))
                 FROM   dbo.tblComandaBase
                        INNER JOIN dbo.tblReceptieComandaBase ON dbo.tblComandaBase.ID = dbo.tblReceptieComandaBase.ComandaBaseID
                        INNER JOIN dbo.tblReceptieComandaDet ON dbo.tblReceptieComandaBase.ID = dbo.tblReceptieComandaDet.ReceptieComandaBaseID
                 WHERE  dbo.tblComandaBase.LotID = dbo.tblLotBase.ID
                        AND dbo.tblProduse.ID = dbo.tblReceptieComandaDet.ProduseID
               ), 0) AS CantitateReceptionata ,
        ISNULL(( SELECT SUM(ISNULL(CantitateReceptionata, 0))
                 FROM   dbo.tblComandaBase
                        INNER JOIN dbo.tblReceptieComandaBase ON dbo.tblComandaBase.ID = dbo.tblReceptieComandaBase.ComandaBaseID
                        INNER JOIN dbo.tblReceptieComandaDet ON dbo.tblReceptieComandaBase.ID = dbo.tblReceptieComandaDet.ReceptieComandaBaseID
                 WHERE  dbo.tblComandaBase.LotID = dbo.tblLotBase.ID
                        AND dbo.tblProduse.ID = dbo.tblReceptieComandaDet.ProduseID
               ), 0) * dbo.tblProduse.Pret AS ValoareReceptionataFaraTVA ,
        ISNULL(( SELECT SUM(ISNULL(CantitateReceptionata, 0))
                 FROM   dbo.tblComandaBase
                        INNER JOIN dbo.tblReceptieComandaBase ON dbo.tblComandaBase.ID = dbo.tblReceptieComandaBase.ComandaBaseID
                        INNER JOIN dbo.tblReceptieComandaDet ON dbo.tblReceptieComandaBase.ID = dbo.tblReceptieComandaDet.ReceptieComandaBaseID
                 WHERE  dbo.tblComandaBase.LotID = dbo.tblLotBase.ID
                        AND dbo.tblProduse.ID = dbo.tblReceptieComandaDet.ProduseID
               ), 0) * dbo.tblProduse.Pret * dbo.tbxCotaTVA.Valoare / 100 AS ValoareReceptionataTVA ,
        ISNULL(( SELECT SUM(ISNULL(CantitateReceptionata, 0))
                 FROM   dbo.tblComandaBase
                        INNER JOIN dbo.tblReceptieComandaBase ON dbo.tblComandaBase.ID = dbo.tblReceptieComandaBase.ComandaBaseID
                        INNER JOIN dbo.tblReceptieComandaDet ON dbo.tblReceptieComandaBase.ID = dbo.tblReceptieComandaDet.ReceptieComandaBaseID
                 WHERE  dbo.tblComandaBase.LotID = dbo.tblLotBase.ID
                        AND dbo.tblProduse.ID = dbo.tblReceptieComandaDet.ProduseID
               ), 0) * dbo.tblProduse.Pret
        + ISNULL(( SELECT   SUM(ISNULL(CantitateReceptionata, 0))
                   FROM     dbo.tblComandaBase
                            INNER JOIN dbo.tblReceptieComandaBase ON dbo.tblComandaBase.ID = dbo.tblReceptieComandaBase.ComandaBaseID
                            INNER JOIN dbo.tblReceptieComandaDet ON dbo.tblReceptieComandaBase.ID = dbo.tblReceptieComandaDet.ReceptieComandaBaseID
                   WHERE    dbo.tblComandaBase.LotID = dbo.tblLotBase.ID
                            AND dbo.tblProduse.ID = dbo.tblReceptieComandaDet.ProduseID
                 ), 0) * dbo.tblProduse.Pret * dbo.tbxCotaTVA.Valoare / 100 AS ValoareReceptionata ,
        dbo.tblLotDet.Cantitate
        - ISNULL(( SELECT   SUM(ISNULL(CantitateReceptionata, 0))
                   FROM     dbo.tblComandaBase
                            INNER JOIN dbo.tblReceptieComandaBase ON dbo.tblComandaBase.ID = dbo.tblReceptieComandaBase.ComandaBaseID
                            INNER JOIN dbo.tblReceptieComandaDet ON dbo.tblReceptieComandaBase.ID = dbo.tblReceptieComandaDet.ReceptieComandaBaseID
                   WHERE    dbo.tblComandaBase.LotID = dbo.tblLotBase.ID
                            AND dbo.tblProduse.ID = dbo.tblReceptieComandaDet.ProduseID
                 ), 0) AS CantitateDisponibila ,
        ( dbo.tblLotDet.Cantitate
          - ISNULL(( SELECT SUM(ISNULL(CantitateReceptionata, 0))
                     FROM   dbo.tblComandaBase
                            INNER JOIN dbo.tblReceptieComandaBase ON dbo.tblComandaBase.ID = dbo.tblReceptieComandaBase.ComandaBaseID
                            INNER JOIN dbo.tblReceptieComandaDet ON dbo.tblReceptieComandaBase.ID = dbo.tblReceptieComandaDet.ReceptieComandaBaseID
                     WHERE  dbo.tblComandaBase.LotID = dbo.tblLotBase.ID
                            AND dbo.tblProduse.ID = dbo.tblReceptieComandaDet.ProduseID
                   ), 0) ) * dbo.tblProduse.Pret AS ValoareDisponitbilaFaraTva ,
        ( dbo.tblLotDet.Cantitate
          - ISNULL(( SELECT SUM(ISNULL(CantitateReceptionata, 0))
                     FROM   dbo.tblComandaBase
                            INNER JOIN dbo.tblReceptieComandaBase ON dbo.tblComandaBase.ID = dbo.tblReceptieComandaBase.ComandaBaseID
                            INNER JOIN dbo.tblReceptieComandaDet ON dbo.tblReceptieComandaBase.ID = dbo.tblReceptieComandaDet.ReceptieComandaBaseID
                     WHERE  dbo.tblComandaBase.LotID = dbo.tblLotBase.ID
                            AND dbo.tblProduse.ID = dbo.tblReceptieComandaDet.ProduseID
                   ), 0) ) * dbo.tblProduse.Pret * dbo.tbxCotaTVA.Valoare
        / 100 AS ValoareDisponibilaTVA ,
        ( dbo.tblLotDet.Cantitate
          - ISNULL(( SELECT SUM(ISNULL(CantitateReceptionata, 0))
                     FROM   dbo.tblComandaBase
                            INNER JOIN dbo.tblReceptieComandaBase ON dbo.tblComandaBase.ID = dbo.tblReceptieComandaBase.ComandaBaseID
                            INNER JOIN dbo.tblReceptieComandaDet ON dbo.tblReceptieComandaBase.ID = dbo.tblReceptieComandaDet.ReceptieComandaBaseID
                     WHERE  dbo.tblComandaBase.LotID = dbo.tblLotBase.ID
                            AND dbo.tblProduse.ID = dbo.tblReceptieComandaDet.ProduseID
                   ), 0) ) * dbo.tblProduse.Pret + ( dbo.tblLotDet.Cantitate
                                                     - ISNULL(( SELECT
                                                              SUM(ISNULL(CantitateReceptionata,
                                                              0))
                                                              FROM
                                                              dbo.tblComandaBase
                                                              INNER JOIN dbo.tblReceptieComandaBase ON dbo.tblComandaBase.ID = dbo.tblReceptieComandaBase.ComandaBaseID
                                                              INNER JOIN dbo.tblReceptieComandaDet ON dbo.tblReceptieComandaBase.ID = dbo.tblReceptieComandaDet.ReceptieComandaBaseID
                                                              WHERE
                                                              dbo.tblComandaBase.LotID = dbo.tblLotBase.ID
                                                              AND dbo.tblProduse.ID = dbo.tblReceptieComandaDet.ProduseID
                                                              ), 0) )
        * dbo.tblProduse.Pret * dbo.tbxCotaTVA.Valoare / 100 AS ValoareDisponibila ,
        ISNULL(( SELECT dbo.tblAcordCadru.Denumire
                 FROM   dbo.tblAcordCadru
                 WHERE  dbo.tblAcordCadru.ID = dbo.tblLotBase.AcordCadruID
               ), '') AS AcordCadru
FROM    dbo.tblLotBase
        INNER JOIN dbo.tblLotDet ON dbo.tblLotBase.ID = dbo.tblLotDet.LotBaseID
        INNER JOIN dbo.tblProduse ON dbo.tblLotDet.ProduseID = dbo.tblProduse.ID
        INNER JOIN dbo.tbxUMStandard ON dbo.tblProduse.UMID = dbo.tbxUMStandard.ID
        INNER JOIN dbo.tbxCotaTVA ON dbo.tblProduse.CotaTVAID = dbo.tbxCotaTVA.ID
WHERE   ( @pLotID IS NULL
          OR dbo.tblLotBase.ID = @pLotID
        )
        AND ( dbo.tblLotBase.PartenerID = @pFurnizorID
              OR @pFurnizorID IS NULL
            );</value>
  </data>
  <metadata name="$this.TrayLargeIcon" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
</root>